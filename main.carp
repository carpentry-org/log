(deftype LogRecord [level Int
                    msg String
                    file String
                    line Int])

(defmodule LogRecord
  (defn level-str [r]
    @(case @(level r)
      5 "TRACE"
      4 "DEBUG"
      3 "INFO"
      2 "WARN"
      1 "ERROR"
      "?"))

  (defn pretty [r]
    (fmt "[%s] %s:%d: %s" &(level-str r) (file r) @(line r) (msg r)))
)

(defmodule Log
  (def TRACE 5)
  (def DEBUG 4)
  (def INFO 3)
  (def WARN 2)
  (def ERROR 1)
  (def OFF 0)

  (private LEVEL)
  (def LEVEL OFF)

  (doc set-level "Sets the log level.")
  (defn set-level [lvl]
    (set! LEVEL lvl))

  (private log)
  (def log (the (Fn [(Ref LogRecord)] ()) (fn [r] ())))

  (doc set-level "Sets the logger.")
  (defn set-logger [logger]
    (set! log logger))

  (hidden priv-log)
  (defn priv-log [msg lvl file line]
    (when (<= lvl LEVEL)
      (log &(LogRecord.init lvl msg @file line))))

  (defmacro error [msg :rest args]
    (list 'Log.priv-log (list 'fmt msg args) 'Log.ERROR (file) (line)))

  (defmacro warn [msg :rest args]
    (list 'Log.priv-log (list 'fmt msg args) 'Log.WARN (file) (line)))

  (defmacro info [msg :rest args]
    (list 'Log.priv-log (list 'fmt msg args) 'Log.INFO (file) (line)))

  (defmacro debug [msg :rest args]
    (list 'Log.priv-log (list 'fmt msg args) 'Log.DEBUG (file) (line)))

  (defmacro trace [msg :rest args]
    (list 'Log.priv-log (list 'fmt msg args) 'Log.TRACE (file) (line)))
)
